[delayed_gcode INIT_ENCODER_STATE]
initial_duration: 2
gcode:
    {% if not printer["gcode_macro _FILAMENT_VARS"].encoder_enabled %}
        SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
    {% endif %}

[gcode_macro ENABLE_ENCODER]
gcode:
  SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=encoder_enabled VALUE=1
  SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
  RESPOND MSG="Encoder enabled"

[gcode_macro DISABLE_ENCODER]
gcode:
    SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=encoder_enabled VALUE=0
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
    RESPOND MSG="Encoder disabled"


[gcode_macro PRE_STEPPER_INSERT]
gcode:
  {% set OriginalState = printer.print_stats.state %}
  {% if not (OriginalState == "paused" or OriginalState == "printing") %}
    RESPOND MSG="PRE_STEPPER_INSERT macro executed with SIDE={ params.SIDE }"
    {% for step in range(50) %}
      M400 # Wait for buffer to clear
      _PRELOAD_FILAMENT SIDE={ params.SIDE }
    {% endfor %}
    FORCE_MOVE STEPPER='extruder_stepper { params.SIDE.lower() }_filament_stepper' DISTANCE=-10 VELOCITY=20
    {% if printer['gcode_macro _FILAMENT_VARS'].activespool == None %}
      ACTIVATE_{ params.SIDE.upper() }_SPOOL
    {% endif %}
  {% endif %}
  

[gcode_macro PRE_STEPPER_RUNOUT]
gcode:
  {% set CURRENT_ACCEL = printer.toolhead.max_accel %}
  {% set CURRENT_TEMP = printer['extruder'].target %}
  {% set OriginalState = printer.print_stats.state %}
  {% if OriginalState == "printing" and printer['filament_switch_sensor ' ~ params.SIDE.lower() ~ '_post_stepper'].filament_detected and not printer['filament_switch_sensor ' ~ ('left' if params.SIDE == 'RIGHT' else 'right') ~ '_post_stepper'].filament_detected %}
    RESPOND MSG="{ params.SIDE } Pre-Stepper Sensor detected runout. Disabling SFS"
    G92 E0
    {% if printer['gcode_macro _FILAMENT_VARS'].encoder_enabled %}
      SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
    {% endif %}
  {% endif %}

[gcode_macro _PRELOAD_FILAMENT]
gcode:
  {% if params.SIDE == 'LEFT' and not printer['filament_switch_sensor left_post_stepper'].filament_detected %}
    FORCE_MOVE STEPPER='extruder_stepper left_filament_stepper' DISTANCE=5 VELOCITY=20
  {% elif params.SIDE == 'RIGHT' and not printer['filament_switch_sensor right_post_stepper'].filament_detected %}
    FORCE_MOVE STEPPER='extruder_stepper right_filament_stepper' DISTANCE=5 VELOCITY=20
  {% endif %}



[gcode_macro PRE_EXTRUDER_RUNOUT]
gcode:
  {% set CURRENT_ACCEL = printer.toolhead.max_accel %}
  {% set CURRENT_TEMP = printer['extruder'].target %}
  {% set OriginalState = printer.print_stats.state %}
  {% if OriginalState == "printing" %}
    PAUSE
    {% if printer["gcode_macro _FILAMENT_VARS"].infinitespool %}
      GO_TO_PURGE
      {% if printer["gcode_macro _FILAMENT_VARS"].activespool == 'left' %}
        RESPOND MSG="Changing to Right"
        ACTIVATE_RIGHT_SPOOL
      {% elif printer["gcode_macro _FILAMENT_VARS"].activespool == 'right' %}  
        RESPOND MSG="Changing to Left"
        ACTIVATE_LEFT_SPOOL
      {% endif %}
      INFSPOOL_LOAD_FILAMENT
      G4 P2000
      SET_VELOCITY_LIMIT ACCEL={CURRENT_ACCEL}
      RESUME
    {% else %}
      RESPOND TYPE=error msg="!! FILAMENT RUNOUT !!"
    {% endif %}
  {% endif %}


#   The minimum length of filament pulled through the sensor to trigger
#   a state change on the switch_pin
#   Default is 7 mm.
[gcode_macro ENCODER_RUNOUT]
gcode:
  {% set CURRENT_ACCEL = printer.toolhead.max_accel %}
  {% set CURRENT_TEMP = printer['extruder'].target %}
  {% set OriginalState = printer.print_stats.state %}
  {% if OriginalState == "printing" %}
    PAUSE
    RESPOND TYPE=error msg="!! JAM DETECTED !!"
  {% endif %}



# Macros
# The filament movement macros have multiple parts, a Main macro that you call which has a loop in it.
# In this loop it will call a secondary macro that does the sensor check and small G1 movement.
# This is because checking a sensor/whatever is done *once* at the activation of a macro
# therefore you can't keep checking a sensor from within a loop in the same macro, but if you
# are calling a *second* macro from the loop, then this second macro will check the sensor each time
# it activates. The loop also has a fixed number of iterations so once the second macro has detected
# its desired state it stops doing anything and the main loop just "runs out" of iterations as I can't
# find a way for the second macro to influence the first macro to cancel a loop early.
#
# The process isn't perfect (due to klipper command queueing and stuff) so you need to have "wiggle" room
# to allow for timing variations between "triggered" and action. But with enough phyisical space for the 
# filament to move after triggering and using small movement motions each time it works well enough.
# 
# At the end of each loop/macro pair there is a call to a third "check" macro which does a final check
# of the sensor just to make sure the loop terminated properly and didn't just "run out" of loop iterations
# without actually completing (ie. if filament gets jammed or the bowden comes loose).


# Automatically selects the spool stepper based on which side has filament at the "post feed stepper" switch
# I have this as a delayed_gcode to run each time Klipper starts, and also in my start_print gcode just to double check.
# Also worth
[gcode_macro SELECT_ACTIVE_SPOOL]
gcode:
  {% if printer['filament_switch_sensor left_post_stepper'].filament_detected and printer['filament_switch_sensor right_post_stepper'].filament_detected %}
    RESPOND TYPE=error msg="!! UNABLE TO DETECT SPOOL, BOTH SENSORS TRIGGERED !!"
  {% elif printer['filament_switch_sensor left_post_stepper'].filament_detected and not printer['filament_switch_sensor right_post_stepper'].filament_detected %}
    ACTIVATE_LEFT_SPOOL
  {% elif printer['filament_switch_sensor right_post_stepper'].filament_detected and not printer['filament_switch_sensor left_post_stepper'].filament_detected %}
    ACTIVATE_RIGHT_SPOOL
  {% else %}
    RESPOND TYPE=error msg="!! UNKNOWN SPOOL CONFIGURATION !!"
  {% endif %}

  
[gcode_macro ACTIVATE_LEFT_SPOOL]
gcode:
  SYNC_EXTRUDER_MOTION EXTRUDER=right_filament_stepper MOTION_QUEUE=
  SYNC_EXTRUDER_MOTION EXTRUDER=left_filament_stepper MOTION_QUEUE=extruder 
  SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=activespool VALUE="'left'"
  CHECK_SPEED_CONTROL  
  RESPOND MSG="Left Spool Activated"

[gcode_macro ACTIVATE_RIGHT_SPOOL]
gcode:
  SYNC_EXTRUDER_MOTION EXTRUDER=right_filament_stepper MOTION_QUEUE=extruder
  SYNC_EXTRUDER_MOTION EXTRUDER=left_filament_stepper MOTION_QUEUE=
  SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=activespool VALUE="'right'"
  CHECK_SPEED_CONTROL  
  RESPOND MSG="Right Spool Activated"

[delayed_gcode INITIAL_ACTIVE_SPOOL] # This will set the current active spool (if filament is in the correct configuration) on boot/restart of Klpper
initial_duration: 5
gcode:
   SELECT_ACTIVE_SPOOL
	
[gcode_macro HARD_CHECK_FILAMENT_LOADED]
# A hard check to make sure you have filament at the extruder. I have this in my START_PRINT after the LOAD_FILAMENT
# macro as a final check and it E-STOP's out if filament isn't detected.
gcode:
	{% if not printer['filament_switch_sensor post_extruder'].filament_detected %}
		RESPOND TYPE=error msg="!! Filament not at extruder. Check for issues with the filament feed. !!"
		CANCEL_PRINT
        M400
	{% endif %}

[gcode_macro REMOVE_FILAMENT]
gcode:
  # Initialize variables based on active stepper
  {% if printer['extruder_stepper left_filament_stepper'].motion_queue == 'extruder' %}
    {% set BOWDEN_LENGTH = printer["gcode_macro _FILAMENT_VARS"].left_bowden_length %}
    {% set SIDE = 'LEFT' %}
  {% elif printer['extruder_stepper right_filament_stepper'].motion_queue == 'extruder' %}
    {% set BOWDEN_LENGTH = printer["gcode_macro _FILAMENT_VARS"].right_bowden_length %}
    {% set SIDE = 'RIGHT' %}
  {% else %}
    RESPOND TYPE=error msg="!! NO SPOOL ACTIVE !!"
    return
  {% endif %}

  # Calculate move distances
  {% set SLOW_REMOVE = printer["gcode_macro _FILAMENT_VARS"].slow_remove_length %}
  {% if SLOW_REMOVE > BOWDEN_LENGTH %}
    {% set SLOW_MOVE = BOWDEN_LENGTH %}
    {% set FAST_MOVE = 0 %}
  {% else %}
    {% set SLOW_MOVE = SLOW_REMOVE %}
    {% set FAST_MOVE = BOWDEN_LENGTH - SLOW_REMOVE %}
  {% endif %}

  # Start removal sequence
  {% set CURRENT_ACCEL = printer.toolhead.max_accel %}
  SET_VELOCITY_LIMIT ACCEL=50
  M83

  # Initial retract from extruder if filament present
  {% if printer['filament_switch_sensor post_extruder'].filament_detected %}
    G1 E-{SLOW_MOVE} F{printer["gcode_macro _FILAMENT_VARS"].slow_feed_rate}
    G1 E-{FAST_MOVE} F{printer["gcode_macro _FILAMENT_VARS"].fast_feed_rate}
    M400
  {% endif %}

  # Remove remaining filament from active side
  RESPOND MSG="Removing filament from {SIDE} side..."
  {% for step in range(350) %}
    M400
    _REMOVING_FILAMENT SIDE={SIDE}
  {% endfor %}
  _REMOVING_FILAMENT_CHECK SIDE={SIDE}
  
  SET_VELOCITY_LIMIT ACCEL={CURRENT_ACCEL}
    

[gcode_macro _REMOVING_FILAMENT] 
gcode:
  {% if params.SIDE == 'LEFT' and printer['filament_switch_sensor left_post_stepper'].filament_detected %}
    G1 E-10 F{printer["gcode_macro _FILAMENT_VARS"].slow_feed_rate} # extrude 10mm 
  {% elif params.SIDE == 'RIGHT' and printer['filament_switch_sensor right_post_stepper'].filament_detected %}
    G1 E-10 F{printer["gcode_macro _FILAMENT_VARS"].slow_feed_rate} # extrude 10mm
  {% endif %}

[gcode_macro _REMOVING_FILAMENT_CHECK] 
gcode:
  {% if params.SIDE == 'LEFT' and printer['filament_switch_sensor left_post_stepper'].filament_detected %}
    RESPOND TYPE=error msg="!! FAULT WITH LEFT SIDE FILAMENT REMOVAL !!"
  {% elif params.SIDE == 'RIGHT' and printer['filament_switch_sensor right_post_stepper'].filament_detected %}
    RESPOND TYPE=error msg="!! FAULT WITH RIGHT SIDE FILAMENT REMOVAL !!"
  {% else %}
    RESPOND MSG="Filament Removed"
  {% endif %}
  

    
[gcode_macro LOAD_FILAMENT]
gcode:
  # Initialize variables based on active stepper
  {% if printer['extruder_stepper left_filament_stepper'].motion_queue == 'extruder' %}
    {% set BOWDEN_LENGTH = printer["gcode_macro _FILAMENT_VARS"].left_bowden_length %}
  {% else %}
    {% set BOWDEN_LENGTH = printer["gcode_macro _FILAMENT_VARS"].right_bowden_length %}
  {% endif %}
  {% set START_SLOW = printer["gcode_macro _FILAMENT_VARS"].start_slow_feed_length %}
  {% set FAST_MOVE = BOWDEN_LENGTH - START_SLOW %}

  # Check if filament already loaded
  {% if printer["filament_switch_sensor post_extruder"].filament_detected %}
    RESPOND MSG="Filament already loaded"
    RESPOND TYPE=error msg="Cannot load new filament while filament is present"
    return
  {% endif %}

  # Validate filament presence at correct stepper
  {% set LEFT_VALID = printer['extruder_stepper left_filament_stepper'].motion_queue == 'extruder' 
                      and printer['filament_switch_sensor left_pre_stepper'].filament_detected 
                      and not printer['filament_switch_sensor right_post_stepper'].filament_detected %}
  
  {% set RIGHT_VALID = printer['extruder_stepper right_filament_stepper'].motion_queue == 'extruder' 
                       and printer['filament_switch_sensor right_pre_stepper'].filament_detected 
                       and not printer['filament_switch_sensor left_post_stepper'].filament_detected %}

  {% if LEFT_VALID or RIGHT_VALID %}
    {% set CURRENT_ACCEL = printer.toolhead.max_accel %}
    RESPOND MSG="Starting filament load sequence"
    M400
    SET_VELOCITY_LIMIT ACCEL={ printer["gcode_macro _FILAMENT_VARS"].feed_accel } ACCEL_TO_DECEL={ printer["gcode_macro _FILAMENT_VARS"].feed_decel }
    M83
    
    # Two-stage loading if path is clear
    {% if not printer["filament_switch_sensor post_extruder"].filament_detected %}
      RESPOND MSG="Performing staged load moves"
      # Initial slow move
      G1 E{START_SLOW} F{printer["gcode_macro _FILAMENT_VARS"].slow_feed_rate}
      # Fast move through remaining bowden
      G1 E{FAST_MOVE} F{printer["gcode_macro _FILAMENT_VARS"].fast_feed_rate}
    {% endif %}
    
    # Fine loading sequence
    {% for step in range(350) %}
      M400
      _LOADING_FILAMENT
    {% endfor %}
      
    _LOADING_FILAMENT_CHECK
  {% else %}
    RESPOND TYPE=error msg="!! FAULT WITH EXTRUDER FILAMENT LOADING - No valid filament detected at active stepper !!"
  {% endif %}
  

[gcode_macro _LOADING_FILAMENT]
gcode:
  {% if not printer['filament_switch_sensor post_extruder'].filament_detected %}
    G1 E10 F{printer["gcode_macro _FILAMENT_VARS"].slow_feed_rate} # extrude 10mm
  {% endif %}
  
[gcode_macro _LOADING_FILAMENT_CHECK]
gcode:
  {% if not printer['filament_switch_sensor post_extruder'].filament_detected %}
    RESPOND TYPE=error msg="!! FAULT WITH EXTRUDER FILAMENT LOADING !!"
  {% else %}
    RESPOND MSG="Filament detected at extruder, doing final push to tip" 
    G1 E25 F300
    RESPOND MSG="Filament Loaded" 
  {% endif %}

[gcode_macro CHECK_SPEED_CONTROL]
gcode:
  {% if printer['gcode_button speed_control'].state == 'PRESSED' %}
    RESPOND MSG="Feeding Faster" 
    FEED_FASTER
  {% elif printer['gcode_button speed_control'].state == 'RELEASED' %}
    RESPOND MSG="Feeding Slower" 
    FEED_SLOWER
  {% endif %}

[gcode_macro FEED_FASTER]  
gcode:
  {% if printer['extruder_stepper left_filament_stepper'].motion_queue == 'extruder' %}
    {% set LOWRD = 1.05 * printer.configfile.config['extruder_stepper left_filament_stepper'].rotation_distance | float %}
    SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=left_filament_stepper DISTANCE={LOWRD}
  {% endif %}
  {% if printer['extruder_stepper right_filament_stepper'].motion_queue == 'extruder' %}
    {% set LOWRD = 1.05 * printer.configfile.config['extruder_stepper right_filament_stepper'].rotation_distance | float %}
    SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=right_filament_stepper DISTANCE={LOWRD}
  {% endif %}

[gcode_macro FEED_SLOWER] 
gcode:
  {% if printer['extruder_stepper left_filament_stepper'].motion_queue == 'extruder' %}
    {% set LOWRD = 0.95 * printer.configfile.config['extruder_stepper left_filament_stepper'].rotation_distance | float %}
    SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=left_filament_stepper DISTANCE={LOWRD}
  {% endif %}
  {% if printer['extruder_stepper right_filament_stepper'].motion_queue == 'extruder' %}
    {% set LOWRD = 0.95 * printer.configfile.config['extruder_stepper right_filament_stepper'].rotation_distance | float %}
    SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=right_filament_stepper DISTANCE={LOWRD}
  {% endif %}

[gcode_macro MEASURE_BOWDEN]
gcode:
  {% if  printer["gcode_macro _FILAMENT_VARS"].activespool == None %}
    RESPOND MSG="No spool active. Activate a spool first"
  {% elif (printer['extruder_stepper left_filament_stepper'].motion_queue == 'extruder' and printer['filament_switch_sensor left_pre_stepper'].filament_detected and not printer['filament_switch_sensor right_post_stepper'].filament_detected) or (printer['extruder_stepper right_filament_stepper'].motion_queue == 'extruder' and printer['filament_switch_sensor right_pre_stepper'].filament_detected and not printer['filament_switch_sensor left_post_stepper'].filament_detected) %}
    RESPOND MSG="Removing Filament to starting location"
	REMOVE_FILAMENT
	RESPOND MSG="Starting Measurement"
	
    {% set CURRENT_ACCEL = printer.toolhead.max_accel %} 
    SET_VELOCITY_LIMIT ACCEL={ printer["gcode_macro _FILAMENT_VARS"].feed_accel } ACCEL_TO_DECEL={ printer["gcode_macro _FILAMENT_VARS"].feed_decel }
	SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=bowden_calculate VALUE=0
    M83
    {% set step = 0 %}
    {% for step in range(350) %}
        M400 # Wait for buffer to clear
        _MEASURING_BOWDEN
    {% endfor %}
    SET_VELOCITY_LIMIT ACCEL={CURRENT_ACCEL}
    _MEASURING_BOWDEN_CHECK
  {% else %}
    RESPOND TYPE=error msg="!! FAULT WITH EXTRUDER FILAMENT LOADING !!"
  {% endif %}
  

[gcode_macro _MEASURING_BOWDEN]
gcode:
  {% if not printer['filament_switch_sensor post_extruder'].filament_detected %}
    G1 E10 F{printer["gcode_macro _FILAMENT_VARS"].fast_feed_rate} # extrude 10mm
    {% set MEASUREMENT = printer["gcode_macro _FILAMENT_VARS"].bowden_calculate + 10 %}
    SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=bowden_calculate VALUE={MEASUREMENT}
  {% endif %}
  
[gcode_macro _MEASURING_BOWDEN_CHECK]
gcode:
  {% if not printer['filament_switch_sensor post_extruder'].filament_detected %}
    RESPOND TYPE=error msg="!! FAULT WITH EXTRUDER FILAMENT LOADING !!"
  {% else %}
    RESPOND MSG="Bowden length is "{printer["gcode_macro _FILAMENT_VARS"].bowden_calculate}
  {% endif %}
  



  
[gcode_macro INFSPOOL_LOAD_FILAMENT]
gcode:
  {% set FAST_MOVE = printer["gcode_macro _FILAMENT_VARS"].bowden_length %}	
  {% if printer["gcode_macro _FILAMENT_VARS"].slow_feed_length > printer["gcode_macro _FILAMENT_VARS"].bowden_length %}
  	{% set SLOW_MOVE = 0 %}
  {% else %}
	{% set SLOW_MOVE = printer["gcode_macro _FILAMENT_VARS"].slow_feed_length %}
  {% endif %}
  {% if printer['filament_switch_sensor pre_extruder'].filament_detected %}
    RESPOND MSG="Filament Already Loaded"
  {% elif (printer['extruder_stepper left_filament_stepper'].motion_queue == 'extruder' and printer['filament_switch_sensor left_pre_stepper'].filament_detected and not printer['filament_switch_sensor right_post_stepper'].filament_detected) or (printer['extruder_stepper right_filament_stepper'].motion_queue == 'extruder' and printer['filament_switch_sensor right_pre_stepper'].filament_detected and not printer['filament_switch_sensor left_post_stepper'].filament_detected) %}
    RESPOND MSG="Loading Filament"
    GO_TO_PURGE
    {% set CURRENT_ACCEL = printer.toolhead.max_accel %} 
    SET_VELOCITY_LIMIT ACCEL={ printer["gcode_macro _FILAMENT_VARS"].feed_accel } ACCEL_TO_DECEL={ printer["gcode_macro _FILAMENT_VARS"].feed_decel }
    M83
    M400
    #Initial fast load
    {% if not printer['filament_switch_sensor pre_extruder'].filament_detected and not printer['filament_switch_sensor left_post_stepper'].filament_detected and not printer['filament_switch_sensor right_post_stepper'].filament_detected %}
      G1 E{SLOW_MOVE} F1000 # Slow move to clear the Splitter/Encoder
      G1 E{FAST_MOVE} F6000 #Fast move most of the way
    {% endif %}
    #Small load loop
    {% set step = 0 %}
    {% for step in range(350) %}
        M400 # Wait for buffer to clear
        _INFSPOOL_LOADING_FILAMENT
    {% endfor %}
    _INFSPOOL_LOADING_FILAMENT_PURGE
    _INFSPOOL_RESUME_PRINT ACCEL={CURRENT_ACCEL}
  {% else %}
    RESPOND TYPE=error msg="!! FAULT WITH EXTRUDER FILAMENT LOADING !!"
  {% endif %}
  
[gcode_macro _INFSPOOL_LOADING_FILAMENT]
gcode:
  {% if not printer['filament_switch_sensor pre_extruder'].filament_detected %}
    G1 E10 F{printer["gcode_macro _FILAMENT_VARS"].fast_feed_rate} # extrude 10mm
  {% endif %}

[gcode_macro _INFSPOOL_LOADING_FILAMENT_PURGE]
gcode:
  {% if printer['filament_switch_sensor pre_extruder'].filament_detected %}
    RESPOND MSG="Filament detected at pre-extruder, pushing to post-extruder"
    M83
    G1 E120 F300
    NOZZLE_PARK
  {% endif %}

[gcode_macro _INFSPOOL_RESUME_PRINT]
gcode:
   {% set CURRENT_ACCEL = params.ACCEL|default(1000)|float %}
   {% if not printer['filament_switch_sensor pre_extruder'].filament_detected %}
     RESPOND TYPE=error msg="!! FAULT WITH EXTRUDER FILAMENT LOADING !!"
   {% else %}
      G4 P2000
      SET_VELOCITY_LIMIT ACCEL={CURRENT_ACCEL}
      G92 E0
      SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
      RESUME
   {% endif %}

[gcode_macro INFINITE_SPOOL_ENABLE]
gcode:
  SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=infinitespool VALUE=1
  RESPOND MSG="Infinite Spool mode enabled"

[gcode_macro INFINITE_SPOOL_DISABLE]
gcode:
  SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=infinitespool VALUE=0
  RESPOND MSG="Infinite Spool mode disabled"

[gcode_macro TOGGLE_INFINITE_SPOOL_MODE]
gcode:
  {% if printer["gcode_macro _FILAMENT_VARS"].infinitespool %}
    INFINITE_SPOOL_DISABLE
  {% else %}
    INFINITE_SPOOL_ENABLE
  {% endif %}
  

	

# Toolchanging
# Possible use for simple two-spool multi-colour

[gcode_macro T0] #Left Spool
gcode:
  {% if printer["gcode_macro _FILAMENT_VARS"].activespool == 'left' %}
    RESPOND MSG="T0 Already Active"
    LOAD_FILAMENT
  {% elif printer['extruder_stepper right_filament_stepper'].motion_queue == 'extruder' and printer['filament_switch_sensor right_pre_stepper'].filament_detected %}
    RESPOND MSG="Changing to T0"
    REMOVE_FILAMENT
    ACTIVATE_LEFT_SPOOL
    LOAD_FILAMENT
  {% else %}
    RESPOND TYPE=error msg="!! UNKNOWN SPOOL CONFIGURATION !!"
  {% endif %}

[gcode_macro T1] #Right Spool
gcode:
  {% if printer["gcode_macro _FILAMENT_VARS"].activespool == 'right' %}
    RESPOND MSG="T1 Already Active"
    LOAD_FILAMENT
  {% elif printer['extruder_stepper left_filament_stepper'].motion_queue == 'extruder' and printer['filament_switch_sensor left_pre_stepper'].filament_detected %}
    RESPOND MSG="Changing to T1"
    REMOVE_FILAMENT
    ACTIVATE_RIGHT_SPOOL
    LOAD_FILAMENT
  {% else %}
    RESPOND TYPE=error msg="!! UNKNOWN SPOOL CONFIGURATION !!"
  {% endif %}


